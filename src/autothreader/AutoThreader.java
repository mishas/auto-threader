package autothreader;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;

import soot.Body;
import soot.BodyTransformer;
import soot.Local;
import soot.Modifier;
import soot.PackManager;
import soot.PatchingChain;
import soot.Scene;
import soot.SootClass;
import soot.SootField;
import soot.SootMethod;
import soot.Transform;
import soot.Type;
import soot.Unit;
import soot.VoidType;
import soot.jimple.AssignStmt;
import soot.jimple.InterfaceInvokeExpr;
import soot.jimple.InvokeStmt;
import soot.jimple.Jimple;
import soot.jimple.StaticInvokeExpr;

public class AutoThreader {
	public static final void main(String[] args) throws IOException {
		Scene.v().setSootClassPath(Scene.v().defaultClassPath() + ":./src");
		System.out.println(Scene.v().getSootClassPath());
		
		SootClass c = Scene.v().loadClassAndSupport("test.Test1");
		Scene.v().addBasicClass("java.util.concurrent.ExecutorService", SootClass.SIGNATURES);
		Scene.v().addBasicClass("java.util.concurrent.Executors", SootClass.SIGNATURES);
		Scene.v().loadNecessaryClasses();
		c.setApplicationClass();

		if (!c.declaresMethodByName("<clinit>")) {
			SootMethod clinit = new SootMethod("<clinit>", new ArrayList<Type>(), VoidType.v(), Modifier.STATIC);
			Body body = Jimple.v().newBody(clinit);
			clinit.setActiveBody(body);
			PatchingChain<Unit> units = body.getUnits();
			Unit return_unit = Jimple.v().newReturnVoidStmt();
		    units.add(return_unit);
			c.addMethod(clinit);
		}
		
		SootClass executorServiceClass = Scene.v().getSootClass("java.util.concurrent.ExecutorService");
		SootField esField = new SootField("_autogenerated_$es", executorServiceClass.getType(), Modifier.STATIC);
		c.addField(esField);
		//SootMethod m = c.getMethodByName("main");
		//Body b = m.retrieveActiveBody();
		
		PackManager.v().getPack("jtp").add(new Transform("jtp.Threadalizer", new Transformer()));
		PackManager.v().runPacks();
        PackManager.v().writeOutput();
        
		//Transformer t = new Transformer();
		//t.transform(b);
		/*
		UnitGraph g = new ExceptionalUnitGraph(b);
		for (Unit u : g) {
			List<ValueBox> boxes = u.getUseBoxes();
			System.out.print(u + " -=-= : ");
			for (ValueBox box : boxes) {
				System.out.print(box + ", ");
			}
			System.out.println("\n");
		}
		*/
	}
	
	public static class Transformer extends BodyTransformer {
		@Override
		protected void internalTransform(Body b, String phaseName, Map<String, String> options) {
			System.out.println("TRANSFORM!");

			PatchingChain<Unit> pc = b.getUnits();

			if ("<clinit>".equals(b.getMethod().getName())) {
				addExecutorField(b, pc);
			}
			
			if ("main".equals(b.getMethod().getName())) {
				addFinalizer(b, pc);
			}
			
			for (Unit u : pc) {
				if (u instanceof AssignStmt) {
					if (((AssignStmt) u).containsInvokeExpr()) {
						if ("heavyFunc".equals(((AssignStmt) u).getInvokeExpr().getMethod().getName())) {
							System.out.println("!!" + u + " " + u.getClass().getCanonicalName());
							
						}
					}
				}
				System.out.println(b.getMethod().getName() + "   " + u);
			}
			
			System.out.println("Done loop");

		}
		
		private void addExecutorField(Body body, PatchingChain<Unit> pc) {
			assert "<clinit>".equals(body.getMethod().getName());
			
			SootClass executorsClass = Scene.v().getSootClass("java.util.concurrent.Executors");
			SootClass test1Class = Scene.v().getSootClass("test.Test1");
			
			SootField esField = test1Class.getFieldByName("_autogenerated_$es");
			
			Local esLocal = Jimple.v().newLocal("temp$es", esField.getType());
			body.getLocals().add(esLocal);
			StaticInvokeExpr invokeExpr = Jimple.v().newStaticInvokeExpr(executorsClass.getMethod("newCachedThreadPool", new ArrayList<Type>()).makeRef());
			AssignStmt tmpAssignStmt = Jimple.v().newAssignStmt(esLocal, invokeExpr);
			
			AssignStmt assignStmt = Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(esField.makeRef()), esLocal);
			
			pc.insertBefore(tmpAssignStmt, pc.getLast());
			pc.insertBefore(assignStmt, pc.getLast());
		}
		
		private void addFinalizer(Body body, PatchingChain<Unit> pc) {
			assert "main".equals(body.getMethod().getName());
			
			SootClass test1Class = Scene.v().getSootClass("test.Test1");
			SootClass executorServiceClass = Scene.v().getSootClass("java.util.concurrent.ExecutorService");
			
			SootField esField = test1Class.getFieldByName("_autogenerated_$es");
			Local esLocal = Jimple.v().newLocal("temp$es", esField.getType());
			body.getLocals().add(esLocal);
			AssignStmt assignStmt = Jimple.v().newAssignStmt(esLocal, Jimple.v().newStaticFieldRef(esField.makeRef()));
			InterfaceInvokeExpr invokeExpr = Jimple.v().newInterfaceInvokeExpr(esLocal, executorServiceClass.getMethodByName("shutdown").makeRef());
			InvokeStmt invokeStmt = Jimple.v().newInvokeStmt(invokeExpr);
			
			pc.insertBefore(assignStmt, pc.getLast());
			pc.insertBefore(invokeStmt, pc.getLast());
		}
	}
}
